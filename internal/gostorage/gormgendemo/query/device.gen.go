// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"godemo/internal/gostorage/gormgendemo/model"
)

func newDevice(db *gorm.DB, opts ...gen.DOOption) device {
	_device := device{}

	_device.deviceDo.UseDB(db, opts...)
	_device.deviceDo.UseModel(&model.Device{})

	tableName := _device.deviceDo.TableName()
	_device.ALL = field.NewAsterisk(tableName)
	_device.ID = field.NewInt64(tableName, "id")
	_device.Name = field.NewString(tableName, "name")
	_device.ProjectID = field.NewString(tableName, "project_id")
	_device.Status = field.NewString(tableName, "status")
	_device.Platform = field.NewString(tableName, "platform")
	_device.Version = field.NewString(tableName, "version")
	_device.Sn = field.NewString(tableName, "sn")
	_device.IP = field.NewString(tableName, "ip")
	_device.SSHPort = field.NewString(tableName, "ssh_port")
	_device.APIPort = field.NewString(tableName, "api_port")
	_device.AssetNo = field.NewString(tableName, "asset_no")
	_device.AssetPrice = field.NewFloat64(tableName, "asset_price")
	_device.PurchTime = field.NewTime(tableName, "purch_time")
	_device.OnlineStatus = field.NewString(tableName, "online_status")
	_device.StartU = field.NewInt32(tableName, "start_u")
	_device.OccupiedU = field.NewInt32(tableName, "occupied_u")
	_device.MaintenanceStart = field.NewTime(tableName, "maintenance_start")
	_device.MaintenanceEnd = field.NewTime(tableName, "maintenance_end")
	_device.Operator = field.NewString(tableName, "operator")
	_device.OperatorPhone = field.NewString(tableName, "operator_phone")
	_device.Purpose = field.NewString(tableName, "purpose")
	_device.ProviderName = field.NewString(tableName, "provider_name")
	_device.DevStatus = field.NewString(tableName, "dev_status")
	_device.LicenseStatus = field.NewString(tableName, "license_status")
	_device.WebURL = field.NewString(tableName, "web_url")
	_device.AccessPasswordID = field.NewString(tableName, "access_password_id")
	_device.AuthPasswordID = field.NewString(tableName, "auth_password_id")
	_device.DeviceGroupID = field.NewString(tableName, "device_group_id")
	_device.SynGroupID = field.NewString(tableName, "syn_group_id")
	_device.SynStatus = field.NewString(tableName, "syn_status")
	_device.SnmpStatus = field.NewString(tableName, "snmp_status")
	_device.LogStatus = field.NewString(tableName, "log_status")
	_device.SynTime = field.NewTime(tableName, "syn_time")
	_device.HostName = field.NewString(tableName, "host_name")
	_device.RawConfigs = field.NewString(tableName, "raw_configs")
	_device.NetacID = field.NewString(tableName, "netac_id")
	_device.ExternalPolicyID = field.NewString(tableName, "external_policy_id")
	_device.MetricVersion = field.NewString(tableName, "metric_version")
	_device.StateSynTime = field.NewString(tableName, "state_syn_time")

	_device.fillFieldMap()

	return _device
}

type device struct {
	deviceDo

	ALL              field.Asterisk
	ID               field.Int64
	Name             field.String
	ProjectID        field.String
	Status           field.String
	Platform         field.String
	Version          field.String
	Sn               field.String
	IP               field.String
	SSHPort          field.String
	APIPort          field.String
	AssetNo          field.String
	AssetPrice       field.Float64
	PurchTime        field.Time
	OnlineStatus     field.String
	StartU           field.Int32
	OccupiedU        field.Int32
	MaintenanceStart field.Time
	MaintenanceEnd   field.Time
	Operator         field.String
	OperatorPhone    field.String
	Purpose          field.String
	ProviderName     field.String
	DevStatus        field.String
	LicenseStatus    field.String
	WebURL           field.String
	AccessPasswordID field.String
	AuthPasswordID   field.String
	DeviceGroupID    field.String
	SynGroupID       field.String
	SynStatus        field.String
	SnmpStatus       field.String
	LogStatus        field.String
	SynTime          field.Time
	HostName         field.String
	RawConfigs       field.String
	NetacID          field.String
	ExternalPolicyID field.String
	MetricVersion    field.String
	StateSynTime     field.String

	fieldMap map[string]field.Expr
}

func (d device) Table(newTableName string) *device {
	d.deviceDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d device) As(alias string) *device {
	d.deviceDo.DO = *(d.deviceDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *device) updateTableName(table string) *device {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.Name = field.NewString(table, "name")
	d.ProjectID = field.NewString(table, "project_id")
	d.Status = field.NewString(table, "status")
	d.Platform = field.NewString(table, "platform")
	d.Version = field.NewString(table, "version")
	d.Sn = field.NewString(table, "sn")
	d.IP = field.NewString(table, "ip")
	d.SSHPort = field.NewString(table, "ssh_port")
	d.APIPort = field.NewString(table, "api_port")
	d.AssetNo = field.NewString(table, "asset_no")
	d.AssetPrice = field.NewFloat64(table, "asset_price")
	d.PurchTime = field.NewTime(table, "purch_time")
	d.OnlineStatus = field.NewString(table, "online_status")
	d.StartU = field.NewInt32(table, "start_u")
	d.OccupiedU = field.NewInt32(table, "occupied_u")
	d.MaintenanceStart = field.NewTime(table, "maintenance_start")
	d.MaintenanceEnd = field.NewTime(table, "maintenance_end")
	d.Operator = field.NewString(table, "operator")
	d.OperatorPhone = field.NewString(table, "operator_phone")
	d.Purpose = field.NewString(table, "purpose")
	d.ProviderName = field.NewString(table, "provider_name")
	d.DevStatus = field.NewString(table, "dev_status")
	d.LicenseStatus = field.NewString(table, "license_status")
	d.WebURL = field.NewString(table, "web_url")
	d.AccessPasswordID = field.NewString(table, "access_password_id")
	d.AuthPasswordID = field.NewString(table, "auth_password_id")
	d.DeviceGroupID = field.NewString(table, "device_group_id")
	d.SynGroupID = field.NewString(table, "syn_group_id")
	d.SynStatus = field.NewString(table, "syn_status")
	d.SnmpStatus = field.NewString(table, "snmp_status")
	d.LogStatus = field.NewString(table, "log_status")
	d.SynTime = field.NewTime(table, "syn_time")
	d.HostName = field.NewString(table, "host_name")
	d.RawConfigs = field.NewString(table, "raw_configs")
	d.NetacID = field.NewString(table, "netac_id")
	d.ExternalPolicyID = field.NewString(table, "external_policy_id")
	d.MetricVersion = field.NewString(table, "metric_version")
	d.StateSynTime = field.NewString(table, "state_syn_time")

	d.fillFieldMap()

	return d
}

func (d *device) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *device) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 39)
	d.fieldMap["id"] = d.ID
	d.fieldMap["name"] = d.Name
	d.fieldMap["project_id"] = d.ProjectID
	d.fieldMap["status"] = d.Status
	d.fieldMap["platform"] = d.Platform
	d.fieldMap["version"] = d.Version
	d.fieldMap["sn"] = d.Sn
	d.fieldMap["ip"] = d.IP
	d.fieldMap["ssh_port"] = d.SSHPort
	d.fieldMap["api_port"] = d.APIPort
	d.fieldMap["asset_no"] = d.AssetNo
	d.fieldMap["asset_price"] = d.AssetPrice
	d.fieldMap["purch_time"] = d.PurchTime
	d.fieldMap["online_status"] = d.OnlineStatus
	d.fieldMap["start_u"] = d.StartU
	d.fieldMap["occupied_u"] = d.OccupiedU
	d.fieldMap["maintenance_start"] = d.MaintenanceStart
	d.fieldMap["maintenance_end"] = d.MaintenanceEnd
	d.fieldMap["operator"] = d.Operator
	d.fieldMap["operator_phone"] = d.OperatorPhone
	d.fieldMap["purpose"] = d.Purpose
	d.fieldMap["provider_name"] = d.ProviderName
	d.fieldMap["dev_status"] = d.DevStatus
	d.fieldMap["license_status"] = d.LicenseStatus
	d.fieldMap["web_url"] = d.WebURL
	d.fieldMap["access_password_id"] = d.AccessPasswordID
	d.fieldMap["auth_password_id"] = d.AuthPasswordID
	d.fieldMap["device_group_id"] = d.DeviceGroupID
	d.fieldMap["syn_group_id"] = d.SynGroupID
	d.fieldMap["syn_status"] = d.SynStatus
	d.fieldMap["snmp_status"] = d.SnmpStatus
	d.fieldMap["log_status"] = d.LogStatus
	d.fieldMap["syn_time"] = d.SynTime
	d.fieldMap["host_name"] = d.HostName
	d.fieldMap["raw_configs"] = d.RawConfigs
	d.fieldMap["netac_id"] = d.NetacID
	d.fieldMap["external_policy_id"] = d.ExternalPolicyID
	d.fieldMap["metric_version"] = d.MetricVersion
	d.fieldMap["state_syn_time"] = d.StateSynTime
}

func (d device) clone(db *gorm.DB) device {
	d.deviceDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d device) replaceDB(db *gorm.DB) device {
	d.deviceDo.ReplaceDB(db)
	return d
}

type deviceDo struct{ gen.DO }

func (d deviceDo) Debug() *deviceDo {
	return d.withDO(d.DO.Debug())
}

func (d deviceDo) WithContext(ctx context.Context) *deviceDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d deviceDo) ReadDB() *deviceDo {
	return d.Clauses(dbresolver.Read)
}

func (d deviceDo) WriteDB() *deviceDo {
	return d.Clauses(dbresolver.Write)
}

func (d deviceDo) Session(config *gorm.Session) *deviceDo {
	return d.withDO(d.DO.Session(config))
}

func (d deviceDo) Clauses(conds ...clause.Expression) *deviceDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d deviceDo) Returning(value interface{}, columns ...string) *deviceDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d deviceDo) Not(conds ...gen.Condition) *deviceDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d deviceDo) Or(conds ...gen.Condition) *deviceDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d deviceDo) Select(conds ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d deviceDo) Where(conds ...gen.Condition) *deviceDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d deviceDo) Order(conds ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d deviceDo) Distinct(cols ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d deviceDo) Omit(cols ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d deviceDo) Join(table schema.Tabler, on ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d deviceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *deviceDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d deviceDo) RightJoin(table schema.Tabler, on ...field.Expr) *deviceDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d deviceDo) Group(cols ...field.Expr) *deviceDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d deviceDo) Having(conds ...gen.Condition) *deviceDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d deviceDo) Limit(limit int) *deviceDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d deviceDo) Offset(offset int) *deviceDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d deviceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *deviceDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d deviceDo) Unscoped() *deviceDo {
	return d.withDO(d.DO.Unscoped())
}

func (d deviceDo) Create(values ...*model.Device) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d deviceDo) CreateInBatches(values []*model.Device, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d deviceDo) Save(values ...*model.Device) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d deviceDo) First() (*model.Device, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Device), nil
	}
}

func (d deviceDo) Take() (*model.Device, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Device), nil
	}
}

func (d deviceDo) Last() (*model.Device, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Device), nil
	}
}

func (d deviceDo) Find() ([]*model.Device, error) {
	result, err := d.DO.Find()
	return result.([]*model.Device), err
}

func (d deviceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Device, err error) {
	buf := make([]*model.Device, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d deviceDo) FindInBatches(result *[]*model.Device, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d deviceDo) Attrs(attrs ...field.AssignExpr) *deviceDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d deviceDo) Assign(attrs ...field.AssignExpr) *deviceDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d deviceDo) Joins(fields ...field.RelationField) *deviceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d deviceDo) Preload(fields ...field.RelationField) *deviceDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d deviceDo) FirstOrInit() (*model.Device, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Device), nil
	}
}

func (d deviceDo) FirstOrCreate() (*model.Device, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Device), nil
	}
}

func (d deviceDo) FindByPage(offset int, limit int) (result []*model.Device, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d deviceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d deviceDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d deviceDo) Delete(models ...*model.Device) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *deviceDo) withDO(do gen.Dao) *deviceDo {
	d.DO = *do.(*gen.DO)
	return d
}
