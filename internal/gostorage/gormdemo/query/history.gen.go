// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"godemo/internal/gostorage/gormdemo/model"
)

func newHistory(db *gorm.DB, opts ...gen.DOOption) history {
	_history := history{}

	_history.historyDo.UseDB(db, opts...)
	_history.historyDo.UseModel(&model.History{})

	tableName := _history.historyDo.TableName()
	_history.ALL = field.NewAsterisk(tableName)
	_history.ID = field.NewInt64(tableName, "id")
	_history.Operation = field.NewString(tableName, "operation")
	_history.ModelID = field.NewString(tableName, "model_id")
	_history.InstanceID = field.NewInt64(tableName, "instance_id")
	_history.User = field.NewString(tableName, "user")
	_history.CreateTime = field.NewString(tableName, "create_time")
	_history.ModelInstance = field.NewString(tableName, "model_instance")
	_history.Description = field.NewString(tableName, "description")
	_history.FieldData = field.NewString(tableName, "field_data")
	_history.RollbackStatus = field.NewInt32(tableName, "rollback_status")
	_history.FailReason = field.NewString(tableName, "fail_reason")
	_history.ModifiedData = field.NewString(tableName, "modified_data")

	_history.fillFieldMap()

	return _history
}

type history struct {
	historyDo

	ALL            field.Asterisk
	ID             field.Int64
	Operation      field.String
	ModelID        field.String
	InstanceID     field.Int64
	User           field.String
	CreateTime     field.String
	ModelInstance  field.String
	Description    field.String
	FieldData      field.String
	RollbackStatus field.Int32
	FailReason     field.String
	ModifiedData   field.String // save modified data

	fieldMap map[string]field.Expr
}

func (h history) Table(newTableName string) *history {
	h.historyDo.UseTable(newTableName)
	return h.updateTableName(newTableName)
}

func (h history) As(alias string) *history {
	h.historyDo.DO = *(h.historyDo.As(alias).(*gen.DO))
	return h.updateTableName(alias)
}

func (h *history) updateTableName(table string) *history {
	h.ALL = field.NewAsterisk(table)
	h.ID = field.NewInt64(table, "id")
	h.Operation = field.NewString(table, "operation")
	h.ModelID = field.NewString(table, "model_id")
	h.InstanceID = field.NewInt64(table, "instance_id")
	h.User = field.NewString(table, "user")
	h.CreateTime = field.NewString(table, "create_time")
	h.ModelInstance = field.NewString(table, "model_instance")
	h.Description = field.NewString(table, "description")
	h.FieldData = field.NewString(table, "field_data")
	h.RollbackStatus = field.NewInt32(table, "rollback_status")
	h.FailReason = field.NewString(table, "fail_reason")
	h.ModifiedData = field.NewString(table, "modified_data")

	h.fillFieldMap()

	return h
}

func (h *history) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := h.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (h *history) fillFieldMap() {
	h.fieldMap = make(map[string]field.Expr, 12)
	h.fieldMap["id"] = h.ID
	h.fieldMap["operation"] = h.Operation
	h.fieldMap["model_id"] = h.ModelID
	h.fieldMap["instance_id"] = h.InstanceID
	h.fieldMap["user"] = h.User
	h.fieldMap["create_time"] = h.CreateTime
	h.fieldMap["model_instance"] = h.ModelInstance
	h.fieldMap["description"] = h.Description
	h.fieldMap["field_data"] = h.FieldData
	h.fieldMap["rollback_status"] = h.RollbackStatus
	h.fieldMap["fail_reason"] = h.FailReason
	h.fieldMap["modified_data"] = h.ModifiedData
}

func (h history) clone(db *gorm.DB) history {
	h.historyDo.ReplaceConnPool(db.Statement.ConnPool)
	return h
}

func (h history) replaceDB(db *gorm.DB) history {
	h.historyDo.ReplaceDB(db)
	return h
}

type historyDo struct{ gen.DO }

func (h historyDo) Debug() *historyDo {
	return h.withDO(h.DO.Debug())
}

func (h historyDo) WithContext(ctx context.Context) *historyDo {
	return h.withDO(h.DO.WithContext(ctx))
}

func (h historyDo) ReadDB() *historyDo {
	return h.Clauses(dbresolver.Read)
}

func (h historyDo) WriteDB() *historyDo {
	return h.Clauses(dbresolver.Write)
}

func (h historyDo) Session(config *gorm.Session) *historyDo {
	return h.withDO(h.DO.Session(config))
}

func (h historyDo) Clauses(conds ...clause.Expression) *historyDo {
	return h.withDO(h.DO.Clauses(conds...))
}

func (h historyDo) Returning(value interface{}, columns ...string) *historyDo {
	return h.withDO(h.DO.Returning(value, columns...))
}

func (h historyDo) Not(conds ...gen.Condition) *historyDo {
	return h.withDO(h.DO.Not(conds...))
}

func (h historyDo) Or(conds ...gen.Condition) *historyDo {
	return h.withDO(h.DO.Or(conds...))
}

func (h historyDo) Select(conds ...field.Expr) *historyDo {
	return h.withDO(h.DO.Select(conds...))
}

func (h historyDo) Where(conds ...gen.Condition) *historyDo {
	return h.withDO(h.DO.Where(conds...))
}

func (h historyDo) Order(conds ...field.Expr) *historyDo {
	return h.withDO(h.DO.Order(conds...))
}

func (h historyDo) Distinct(cols ...field.Expr) *historyDo {
	return h.withDO(h.DO.Distinct(cols...))
}

func (h historyDo) Omit(cols ...field.Expr) *historyDo {
	return h.withDO(h.DO.Omit(cols...))
}

func (h historyDo) Join(table schema.Tabler, on ...field.Expr) *historyDo {
	return h.withDO(h.DO.Join(table, on...))
}

func (h historyDo) LeftJoin(table schema.Tabler, on ...field.Expr) *historyDo {
	return h.withDO(h.DO.LeftJoin(table, on...))
}

func (h historyDo) RightJoin(table schema.Tabler, on ...field.Expr) *historyDo {
	return h.withDO(h.DO.RightJoin(table, on...))
}

func (h historyDo) Group(cols ...field.Expr) *historyDo {
	return h.withDO(h.DO.Group(cols...))
}

func (h historyDo) Having(conds ...gen.Condition) *historyDo {
	return h.withDO(h.DO.Having(conds...))
}

func (h historyDo) Limit(limit int) *historyDo {
	return h.withDO(h.DO.Limit(limit))
}

func (h historyDo) Offset(offset int) *historyDo {
	return h.withDO(h.DO.Offset(offset))
}

func (h historyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *historyDo {
	return h.withDO(h.DO.Scopes(funcs...))
}

func (h historyDo) Unscoped() *historyDo {
	return h.withDO(h.DO.Unscoped())
}

func (h historyDo) Create(values ...*model.History) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Create(values)
}

func (h historyDo) CreateInBatches(values []*model.History, batchSize int) error {
	return h.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (h historyDo) Save(values ...*model.History) error {
	if len(values) == 0 {
		return nil
	}
	return h.DO.Save(values)
}

func (h historyDo) First() (*model.History, error) {
	if result, err := h.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Take() (*model.History, error) {
	if result, err := h.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Last() (*model.History, error) {
	if result, err := h.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) Find() ([]*model.History, error) {
	result, err := h.DO.Find()
	return result.([]*model.History), err
}

func (h historyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.History, err error) {
	buf := make([]*model.History, 0, batchSize)
	err = h.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (h historyDo) FindInBatches(result *[]*model.History, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return h.DO.FindInBatches(result, batchSize, fc)
}

func (h historyDo) Attrs(attrs ...field.AssignExpr) *historyDo {
	return h.withDO(h.DO.Attrs(attrs...))
}

func (h historyDo) Assign(attrs ...field.AssignExpr) *historyDo {
	return h.withDO(h.DO.Assign(attrs...))
}

func (h historyDo) Joins(fields ...field.RelationField) *historyDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Joins(_f))
	}
	return &h
}

func (h historyDo) Preload(fields ...field.RelationField) *historyDo {
	for _, _f := range fields {
		h = *h.withDO(h.DO.Preload(_f))
	}
	return &h
}

func (h historyDo) FirstOrInit() (*model.History, error) {
	if result, err := h.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) FirstOrCreate() (*model.History, error) {
	if result, err := h.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.History), nil
	}
}

func (h historyDo) FindByPage(offset int, limit int) (result []*model.History, count int64, err error) {
	result, err = h.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = h.Offset(-1).Limit(-1).Count()
	return
}

func (h historyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = h.Count()
	if err != nil {
		return
	}

	err = h.Offset(offset).Limit(limit).Scan(result)
	return
}

func (h historyDo) Scan(result interface{}) (err error) {
	return h.DO.Scan(result)
}

func (h historyDo) Delete(models ...*model.History) (result gen.ResultInfo, err error) {
	return h.DO.Delete(models)
}

func (h *historyDo) withDO(do gen.Dao) *historyDo {
	h.DO = *do.(*gen.DO)
	return h
}
