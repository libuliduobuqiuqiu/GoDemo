// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: message.proto

package gen

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	MessageService_SendMessage_FullMethodName = "/MessageService/SendMessage"
	MessageService_RecvMessage_FullMethodName = "/MessageService/RecvMessage"
)

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	SendMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (MessageService_SendMessageClient, error)
	RecvMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_RecvMessageClient, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) SendMessage(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (MessageService_SendMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[0], MessageService_SendMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceSendMessageClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MessageService_SendMessageClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type messageServiceSendMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceSendMessageClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *messageServiceClient) RecvMessage(ctx context.Context, opts ...grpc.CallOption) (MessageService_RecvMessageClient, error) {
	stream, err := c.cc.NewStream(ctx, &MessageService_ServiceDesc.Streams[1], MessageService_RecvMessage_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &messageServiceRecvMessageClient{stream}
	return x, nil
}

type MessageService_RecvMessageClient interface {
	Send(*Message) error
	CloseAndRecv() (*wrapperspb.Int64Value, error)
	grpc.ClientStream
}

type messageServiceRecvMessageClient struct {
	grpc.ClientStream
}

func (x *messageServiceRecvMessageClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *messageServiceRecvMessageClient) CloseAndRecv() (*wrapperspb.Int64Value, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.Int64Value)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	SendMessage(*wrapperspb.StringValue, MessageService_SendMessageServer) error
	RecvMessage(MessageService_RecvMessageServer) error
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) SendMessage(*wrapperspb.StringValue, MessageService_SendMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method SendMessage not implemented")
}
func (UnimplementedMessageServiceServer) RecvMessage(MessageService_RecvMessageServer) error {
	return status.Errorf(codes.Unimplemented, "method RecvMessage not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_SendMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MessageServiceServer).SendMessage(m, &messageServiceSendMessageServer{stream})
}

type MessageService_SendMessageServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type messageServiceSendMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceSendMessageServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func _MessageService_RecvMessage_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(MessageServiceServer).RecvMessage(&messageServiceRecvMessageServer{stream})
}

type MessageService_RecvMessageServer interface {
	SendAndClose(*wrapperspb.Int64Value) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type messageServiceRecvMessageServer struct {
	grpc.ServerStream
}

func (x *messageServiceRecvMessageServer) SendAndClose(m *wrapperspb.Int64Value) error {
	return x.ServerStream.SendMsg(m)
}

func (x *messageServiceRecvMessageServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendMessage",
			Handler:       _MessageService_SendMessage_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "RecvMessage",
			Handler:       _MessageService_RecvMessage_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "message.proto",
}
